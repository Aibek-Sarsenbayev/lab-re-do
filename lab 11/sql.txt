CREATE PROCEDURE Insert_data(text, text)
LANGUAGE 'plpgsql'

AS $$

BEGIN

INSERT INTO public.phone_book("PersonName", "PhoneNumber") values ($1, $2);
COMMIT;

END;
$$;


CREATE PROCEDURE Update_data (
    IN ContactName TEXT,
    IN NewPhone TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN

    IF EXISTS (SELECT * FROM public.phone_book WHERE "PersonName" = ContactName) THEN
	
        UPDATE public.phone_book SET "PhoneNumber" = NewPhone WHERE "PersonName" = ContactName;
        RAISE INFO 'Phone number updated for contact %', ContactName;
    ELSE
        RAISE EXCEPTION 'Contact % does not exist', ContactName;
    END IF;
END;
$$;



SELECT * FROM get_records_by_pattern('John');

CREATE OR REPLACE PROCEDURE insert_list_of_users(
    IN users TEXT[][]
)
LANGUAGE 'plpgsql'
AS $$
DECLARE
    i TEXT[];
BEGIN
    DELETE FROM postgres.public.phone_book_incorrect_data;
	FOREACH i SLICE 1 IN ARRAY users
    LOOP
        IF (LENGTH(i[2]) = 11 AND i[2] ~ '^[0-9]') THEN
            INSERT INTO public.phone_book ("PersonName", "PhoneNumber") VALUES (i[1], i[2]);
        ELSE
			INSERT INTO public.phone_book_incorrect_data ("PersonName", "PhoneNumber") VALUES (i[1], i[2]);
		END IF;
    END LOOP;
END;
$$;

CALL insert_list_of_users(ARRAY[
    ARRAY['John Doe', '87076002321'],
    ARRAY['Jane Smith', '87076002327'],
    ARRAY['Bob Johnson', '87076002329']
]);


CREATE OR REPLACE FUNCTION paginating(a integer, b integer)
RETURNS SETOF public.phone_book
AS $$
    SELECT * FROM public.phone_book 
	ORDER BY id
	LIMIT a OFFSET b;
$$
language sql;


CREATE OR REPLACE PROCEDURE delete_data_by_username_or_phone(
    IN delete_by text,
    IN delete_value text
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF delete_by = 'username' THEN
        DELETE FROM public.phone_book WHERE "PersonName" = delete_value;
    ELSIF delete_by = 'phone' THEN
        DELETE FROM public.phone_book WHERE "PhoneNumber" = delete_value;
    ELSE
        RAISE EXCEPTION 'Invalid delete_by parameter: %', delete_by;
    END IF;
END;
$$;

SELECT * FROM paginating(2, 0);

SELECT * from public.phone_book;

CALL insert_data('Alina', '87038309789')

CALL update_data('Askar', '870785769795')

CALL delete_data_by_username_or_phone('username', 'John Doe');

CALL delete_data_by_username_or_phone('phone', '87076002329');

DELETE FROM public.phone_book

CREATE OR REPLACE FUNCTION get_records_by_pattern(p_pattern TEXT)
RETURNS TABLE ("PersonName" TEXT, "PhoneNumber" TEXT) AS $$
BEGIN
  RETURN QUERY SELECT phone_book."PersonName", phone_book."PhoneNumber" FROM public.phone_book
               WHERE phone_book."PersonName" LIKE '%' || p_pattern || '%'
                  OR phone_book."PhoneNumber" LIKE '%' || p_pattern || '%';
END;
$$ LANGUAGE 'plpgsql';

SELECT * FROM get_records_by_pattern('John');